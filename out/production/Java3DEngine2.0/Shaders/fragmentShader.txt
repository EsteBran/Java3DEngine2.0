#version 400 core

in vec2 pass_TextureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 cameraPos;
in vec3 FragPos;


out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;




struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
}; 
uniform Material material;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform Light light; 


void main(void) {
	
	//ambient 
    vec3 ambient = light.ambient * texture(material.diffuse, pass_TextureCoords).rgb;
	
	//diffuse 
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    float diff = max(dot(unitNormal, unitLightVector), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, pass_TextureCoords).rgb;
	
	
	//specular 
    vec3 viewDir = normalize(cameraPos - FragPos);
    vec3 reflectDir = reflect(-unitLightVector, unitNormal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, pass_TextureCoords).rgb;
	
	

    out_Color =  vec4(ambient + diffuse + specular , 1.0) * texture(textureSampler, pass_TextureCoords);

}


